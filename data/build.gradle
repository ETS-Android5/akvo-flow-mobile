apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude '.readme'
    }

    lintOptions {
        abortOnError false
        ignore 'InvalidPackage'
        xmlReport false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation project(path: ':domain')
    implementation project(path: ':database')
    implementation "com.google.dagger:dagger:${rootProject.ext.daggerVersion}"
    annotationProcessor "com.google.dagger:dagger-compiler:${rootProject.ext.daggerVersion}"
    implementation "androidx.annotation:annotation:${rootProject.ext.annotationVersion}"
    implementation "androidx.appcompat:appcompat:${rootProject.ext.appCompatVersion}"
    implementation "androidx.exifinterface:exifinterface:${rootProject.ext.exifVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:${rootProject.ext.loggingInterceptorVersion}"
    implementation "com.squareup.retrofit2:adapter-rxjava2:${rootProject.ext.adapterRxJava2Version}"
    implementation "com.squareup.retrofit2:converter-gson:${rootProject.ext.converterGsonVersion}"
    implementation "com.squareup.retrofit2:converter-scalars:${rootProject.ext.converterScalarsVersion}"
    implementation "com.jakewharton.timber:timber:${rootProject.ext.timberVersion}"
    implementation "com.squareup.sqlbrite2:sqlbrite:${rootProject.ext.sqlbriteVersion}"
    implementation "io.reactivex.rxjava2:rxandroid:${rootProject.ext.rxAndroidVersion}"
    implementation "io.reactivex.rxjava2:rxjava:${rootProject.ext.rxJavaVersion}"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "androidx.core:core-ktx:${rootProject.ext.coreKtxVersion}"

    testImplementation "junit:junit:${rootProject.ext.jUnitVersion}"
    testImplementation "org.mockito:mockito-core:${rootProject.ext.mockitoCoreVersion}"
    testImplementation "org.powermock:powermock-module-junit4:${rootProject.ext.powerMockVersion}"
    testImplementation "org.powermock:powermock-module-junit4-rule:${rootProject.ext.powerMockVersion}"
    testImplementation "org.powermock:powermock-api-mockito:${rootProject.ext.powerMockVersion}"
    testImplementation "org.powermock:powermock-classloading-xstream:${rootProject.ext.powerMockVersion}"
    testImplementation "com.squareup.okhttp3:mockwebserver:${rootProject.ext.mockServerVersion}"
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
}
repositories {
    mavenCentral()
}
